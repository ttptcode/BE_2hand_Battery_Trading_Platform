// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Second_hand_EV_Battery_Trading_Platform.src.Infrastructure.Persistence;

#nullable disable

namespace Second_hand_EV_Battery_Trading_Platform.Migrations
{
    [DbContext(typeof(OemEvWarrantyContext))]
    [Migration("20250929164345_InitialBaseline")]
    partial class InitialBaseline
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.AuctionResult", b =>
                {
                    b.Property<Guid>("AuctionResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("WinnerMaxBid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("WinningBid")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("AuctionResultId")
                        .HasName("PK__AuctionR__0809D9D86E5BF2C4");

                    b.HasIndex("ListingId");

                    b.HasIndex("WinnerId");

                    b.ToTable("AuctionResult", (string)null);
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Bid", b =>
                {
                    b.Property<Guid>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("BidderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("MaxBidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("ProxyActive")
                        .HasColumnType("bit");

                    b.HasKey("BidId")
                        .HasName("PK__Bid__4A733D92798D03D8");

                    b.HasIndex("BidderId");

                    b.HasIndex("ListingId");

                    b.ToTable("Bid", (string)null);
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Conversation", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ConversationId")
                        .HasName("PK__Conversa__C050D877750979DB");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SellerId");

                    b.ToTable("Conversation", (string)null);
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.FeeCommission", b =>
                {
                    b.Property<Guid>("FeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FeeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FeeType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("MaxListings")
                        .HasColumnType("int");

                    b.Property<int?>("PackageDurationDays")
                        .HasColumnType("int");

                    b.Property<decimal?>("SavingAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("FeeId")
                        .HasName("PK__FeeCommi__B387B229847024E8");

                    b.ToTable("FeeCommission", (string)null);
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("BatteryCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("Cycles")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .HasColumnType("text");

                    b.Property<string>("ItemType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("ItemId")
                        .HasName("PK__Item__727E838B396B744E");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "SerialNumber" }, "UQ__Item__048A000870549516")
                        .IsUnique()
                        .HasFilter("[SerialNumber] IS NOT NULL");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Listing", b =>
                {
                    b.Property<Guid>("ListingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("BuyNowPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("FeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ListingType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("StartPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ListingId")
                        .HasName("PK__Listing__BF3EBED069BB4A02");

                    b.HasIndex("FeeId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Listing", (string)null);
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageId")
                        .HasName("PK__Message__C87C0C9C01694673");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.PaymentTransaction", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("FeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TransactionRef")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentId")
                        .HasName("PK__PaymentT__9B556A38FE8F35D8");

                    b.HasIndex("FeeId");

                    b.HasIndex("ListingId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentTransaction", (string)null);
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE1A765443A9");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Role__8A2B61601A857A21")
                        .IsUnique()
                        .HasFilter("[RoleName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CC4C3933A59D");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__User__A9D10534E5B949DF")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.UserReputationReview", b =>
                {
                    b.Property<Guid>("ReputationReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("RevieweeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReputationReviewId")
                        .HasName("PK__UserRepu__6B1FFF21E6FDBC5A");

                    b.HasIndex("ItemId");

                    b.HasIndex("RevieweeId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("UserReputationReview", (string)null);
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.AuctionResult", b =>
                {
                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.Listing", "Listing")
                        .WithMany("AuctionResults")
                        .HasForeignKey("ListingId")
                        .HasConstraintName("FK__AuctionRe__Listi__70DDC3D8");

                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", "Winner")
                        .WithMany("AuctionResults")
                        .HasForeignKey("WinnerId")
                        .HasConstraintName("FK__AuctionRe__Winne__71D1E811");

                    b.Navigation("Listing");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Bid", b =>
                {
                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", "Bidder")
                        .WithMany("Bids")
                        .HasForeignKey("BidderId")
                        .HasConstraintName("FK__Bid__BidderId__6FE99F9F");

                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.Listing", "Listing")
                        .WithMany("Bids")
                        .HasForeignKey("ListingId")
                        .HasConstraintName("FK__Bid__ListingId__6EF57B66");

                    b.Navigation("Bidder");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Conversation", b =>
                {
                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", "Buyer")
                        .WithMany("ConversationBuyers")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK__Conversat__Buyer__74AE54BC");

                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.Item", "Item")
                        .WithMany("Conversations")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__Conversat__ItemI__72C60C4A");

                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", "Seller")
                        .WithMany("ConversationSellers")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK__Conversat__Selle__73BA3083");

                    b.Navigation("Buyer");

                    b.Navigation("Item");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Item", b =>
                {
                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Item__UserId__6B24EA82");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Listing", b =>
                {
                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.FeeCommission", "Fee")
                        .WithMany("Listings")
                        .HasForeignKey("FeeId")
                        .HasConstraintName("FK__Listing__FeeId__6E01572D");

                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.Item", "Item")
                        .WithMany("Listings")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__Listing__ItemId__6C190EBB");

                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", "User")
                        .WithMany("Listings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Listing__UserId__6D0D32F4");

                    b.Navigation("Fee");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Message", b =>
                {
                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("FK__Message__Convers__75A278F5");

                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK__Message__SenderI__76969D2E");

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.PaymentTransaction", b =>
                {
                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.FeeCommission", "Fee")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("FeeId")
                        .HasConstraintName("FK__PaymentTr__FeeId__7B5B524B");

                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.Listing", "Listing")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("ListingId")
                        .HasConstraintName("FK__PaymentTr__Listi__7C4F7684");

                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", "User")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PaymentTr__UserI__7A672E12");

                    b.Navigation("Fee");

                    b.Navigation("Listing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", b =>
                {
                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User__RoleId__6A30C649");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.UserReputationReview", b =>
                {
                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.Item", "Item")
                        .WithMany("UserReputationReviews")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__UserReput__ItemI__797309D9");

                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", "Reviewee")
                        .WithMany("UserReputationReviewReviewees")
                        .HasForeignKey("RevieweeId")
                        .HasConstraintName("FK__UserReput__Revie__787EE5A0");

                    b.HasOne("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", "Reviewer")
                        .WithMany("UserReputationReviewReviewers")
                        .HasForeignKey("ReviewerId")
                        .HasConstraintName("FK__UserReput__Revie__778AC167");

                    b.Navigation("Item");

                    b.Navigation("Reviewee");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.FeeCommission", b =>
                {
                    b.Navigation("Listings");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Item", b =>
                {
                    b.Navigation("Conversations");

                    b.Navigation("Listings");

                    b.Navigation("UserReputationReviews");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Listing", b =>
                {
                    b.Navigation("AuctionResults");

                    b.Navigation("Bids");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Second_hand_EV_Battery_Trading_Platform.src.Domain.User", b =>
                {
                    b.Navigation("AuctionResults");

                    b.Navigation("Bids");

                    b.Navigation("ConversationBuyers");

                    b.Navigation("ConversationSellers");

                    b.Navigation("Items");

                    b.Navigation("Listings");

                    b.Navigation("Messages");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("UserReputationReviewReviewees");

                    b.Navigation("UserReputationReviewReviewers");
                });
#pragma warning restore 612, 618
        }
    }
}
